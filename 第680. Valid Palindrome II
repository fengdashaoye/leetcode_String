Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.

Example 1:
Input: "aba"
Output: True
Example 2:
Input: "abca"
Output: True
Explanation: You could delete the character 'c'.
这道题总体还是挺简单的。只不过是在判断是否回文的同时发现相对位置的字符不同时看看删除一个是否还是回文。但是我的方法效率特别低
代码:
class Solution {
    public boolean validPalindrome(String s) {
        if(s.length() <= 1){
            return true;
        }
        boolean result = true;
        int low = 0;
        int high = s.length() - 1;
        StringBuffer content = new StringBuffer(s);
        while(low < high){
            if(s.charAt(low) != s.charAt(high)){
                if(s.charAt(low + 1) == s.charAt(high)){
                    result = palin(content.deleteCharAt(low).toString());
                    if(s.charAt(low) == s.charAt(high - 1) && result == false){//为了避免lcuppucul这种情况
                        content.insert(low, s.charAt(low));
                        result = palin(content.deleteCharAt(high).toString());
                    }
                }else if(s.charAt(low) == s.charAt(high - 1)){
                    result = palin(content.deleteCharAt(high).toString());
                }else{
                    result = false;
                }
                break;
            }else{
                low++;
                high--;
            }
        }
        return result;
    }
    public boolean palin(String s){
        System.out.println(s);
        if(s.length() <= 1){
            return true;
        }
        boolean result = true;
        int low = 0;
        int high = s.length() - 1;
        while(low < high){
            if(s.charAt(low) != s.charAt(high)){
                result = false;
                break;
            }else{
                low++;
                high--;
            }
        }
        return result;
    }
}

别人的思路:他的思路和我是一样的，不过他有坐标为参数，所以之前判断是回文的最前和最后字段就忽略了，所以效率要比我的高一些
class Solution {
    public boolean validPalindrome(String s) {
        int i = 0, j = s.length() - 1;
        while (i < j && s.charAt(i) == s.charAt(j)) {
            i++; j--;
        }

        if (i >= j) return true;

        if (isPalin(s, i + 1, j) || isPalin(s, i, j - 1)) return true;
        return false;
    }

    private boolean isPalin(String s, int i, int j) {
        while (i < j) {
            if (s.charAt(i) == s.charAt(j)) {
                i++; j--;
            }
            else return false;
        }
        return true;
    }
}

You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.

The null node needs to be represented by empty parenthesis pair "()". And you need to omit all the empty 
parenthesis pairs that don't affect the 
one-to-one mapping relationship between the string and the original binary tree.
Example 1:
Input: Binary tree: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     

Output: "1(2(4))(3)"

Explanation: Originallay it needs to be "1(2(4)())(3()())", 
but you need to omit all the unnecessary empty parenthesis pairs. 
And it will be "1(2(4))(3)".
Example 2:
Input: Binary tree: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 

Output: "1(2()(4))(3)"

Explanation: Almost the same as the first example, 
except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.

思路:老实说，这道题我自己没有什么太多的思路
本题的考点是先序遍历，在遍历的过程中，注意什么时候加括号，什么时候不加括号。规律如下：
左子树空，右子树空： 啥都不加 
左不空，右不空： 左加括号，右加括号 
左空，右不空： 左加括号，右加括号 
左不空，右空：左加括号

总结一下，只要右不空，就都加 
如果右空，则左不空就左加
代码:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public String tree2str(TreeNode t) {
        if(t == null){
            return "";
        }
        String result = t.val + "";
        String left = tree2str(t.left);
        String right = tree2str(t.right);
        
        if(left == "" && right == "") return result;//都为空，不加
        if(left == "") return result + "()" + "(" + right + ")";//右不空就都加括号,因为左为空，所以为(),右不为空，所以为(right)
        if(right == "") return result + "(" + left + ")";//右空，左不空就左加，因此(left)
        return result + "(" + left + ")" + "(" + right + ")";//右不空就都加括号,所以(left) + (right)
        
        
    }
}

思路下的代码:
public String tree2str(TreeNode t) {
        if(t == null) {
            return "";
        }

        StringBuilder sb = new StringBuilder();
        sb.append(t.val);

        if(t.right != null) {
            sb.append("(").append(tree2str(t.left)).append(")")
            .append("(").append(tree2str(t.right)).append(")");
        }else if(t.left != null) {
            sb.append("(").append(tree2str(t.left)).append(")");
        }

        return sb.toString();
    }

The count-and-say sequence is the sequence of integers with the first five terms as following:

1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n, generate the nth term of the count-and-say sequence.

Note: Each term of the sequence of integers will be represented as a string.
题意，这道题的意思是
题意是n=1时输出字符串1；n=2时，数上次字符串中的数值个数，因为上次字符串有1个1，所以输出11；n=3时，
由于上次字符是11，有2个1，所以输出21；n=4时，由于上次字符串是21，有1个2和1个1，所以输出1211。依次类推，写个countAndSay(n)函数返回字符串。
最笨的方法，从1开始，不断往后,但其实可以看出这道题应是道递归的题
代码:
public class Solution {
    public String countAndSay(int n) {
        if(n <= 0){
            return "";
        }
        if(n == 1){
            return "1";
        }
        String start = "1";
        for(int i = 2; i <= n; i++){
            String content = "";
            int number = 0;
            int panduan = 0;
            for(int j = 0; j < start.length(); j++){
                if(panduan == 0){
                    number++;
                    panduan = 1;
                }else{
                    if(start.charAt(j) == start.charAt(j-1)){
                        number++;
                    }else{
                        content = content + String.valueOf(number) + start.charAt(j-1);
                        number = 1;
                    }
                }
            }
            content = content + String.valueOf(number) + start.charAt(start.length()-1);
            start = content;
        }
        return start;
        
    }
    
}
我看好多方法跟我一样，都为O(n次方)，也是从1开始，没有n个输出字符串的关系
public class Solution {
    public String countAndSay(int n) {
        String result = "1";
        for (int outer = 1; outer < n; outer++) {
            String previous = result;
            result = "";
            int count = 1;
            char say = previous.charAt(0);

            for (int i = 1; i < previous.length(); i++) {
                if (previous.charAt(i) != say) {
                    result = result + count + say;
                    count = 1;
                    say = previous.charAt(i);
                } else count++;
            }
            result = result + count + say;
        }
        return result;
    }
}
也有用递归的
public class Solution {
    public String countAndSay(int n) {
        if(n == 1)
            return "1";

        String prev = countAndSay(n - 1);

        StringBuilder sb = new StringBuilder();
        int count = 1;
        char prevNum = prev.charAt(0);
        for(int i = 1; i < prev.length(); ++i) {
            char curNum = prev.charAt(i);
            if(curNum == prevNum) {
                ++count;
            }
            else {
                sb.append(count);
                sb.append(prevNum);
                count = 1;
            }
            prevNum = curNum;
        }
        sb.append(count);
        sb.append(prevNum);

        return sb.toString();
    }
}

